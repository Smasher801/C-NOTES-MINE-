/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>

using namespace std;
struct node {
    
  node *lchild;
   int data;
   node *rchild;
    
} *root = NULL ;


struct queue {
    int size;
    int front;
    int rear;
    node **Q;
};

void create (queue *a){
    cout << "enter the size"<<" ";
    cin >> a->size;
    a->Q = new node*[a->size];
    a->front = a->rear = 0 ;
}


void enqueue (queue *a,node *x){
      if((a->rear+1)%a->size==a->front){
          cout << "overflow"<<"\n";
      }
      else{
        a->rear = (a->rear+1)%a->size;
          a->Q[a->rear] = x;
          
      }
}

node* dequeue (queue *a){
     node *x = NULL;
    if(a->front == a->rear){
        cout << "empty"<<"\n";
    }
    else {
    a->front=(a->front+1)%a->size;
        x = a->Q[a->front];
    }
    return x;
}

int isEmpty( queue a)
{
 return a.front == a.rear ;
}


void Treecreate(){
    node *p, *t;
    int x;
    queue a;
    create (&a);
    
    cout << "enter the root value"<< " ";
    cin >> x;
    root = new node;
    root -> data = x;
    root -> lchild = root -> rchild = NULL;
     enqueue(&a,root);
     while(!isEmpty(a)){
         p = dequeue(&a);
         cout << "enter the left child of"<< " " << p->data <<" ";
         cin >> x;
         if (x!= -1){
             t = new node;
             t->data=x;
             t->lchild=t->rchild=NULL;
             p->lchild=t;
             enqueue(&a,t);
         }
         cout << "enter the right child of"<<" "<< p-> data<< " ";
         cin >> x;
         if (x!= -1){
             t = new node;
             t->data=x;
             t->lchild=t->rchild=NULL;
             p->rchild=t;
             enqueue(&a,t);
         }
     }
}

void preOrder(node *p)
{
 if(p)
 {

 cout << p -> data << " ";
 preOrder(p -> lchild);
 preOrder(p -> rchild);
 }
}


void inOrder(node *p)
{
 if(p)
 {


 inOrder(p -> lchild);
 cout << p -> data << " ";
 inOrder(p -> rchild);
  
 }
}

void postOrder(node *p)
{
 if(p)
 {


 postOrder(p -> lchild);
 postOrder(p -> rchild);
  cout << p -> data << " ";
 }
}


int main()
{
   Treecreate();
   preOrder(root);
   cout<<"\n";
   inOrder(root);
   cout<<"\n";
   postOrder(root);
 
    return 0;
}



